/*
 * explore-api
 * The Opendatasoft Explore API v2 is organized around REST. It provides access to all the data available through the platform in a coherent, hierarchical way.  - Only the HTTP `GET` method is supported. - All API endpoints return JSON. - Endpoints are organized in a hierarchical way describing the relative relationship between objects. - All responses contain a list of links allowing easy and relevant navigation through the API endpoints. - All endpoints use the [Opendatasoft Query Language (ODSQL)](https://help.opendatasoft.com/apis/ods-explore-v2/#section/Opendatasoft-Query-Language-(ODSQL)). This means that, most of the time, parameters work the same way for all endpoints. - While the `records` endpoint is subject to a [limited number of returned records](https://help.opendatasoft.com/apis/ods-explore-v2/#tag/Dataset/operation/getRecords), the `exports` endpoint has no limitations.
 *
 * The version of the OpenAPI document: v2.1
 * Contact: support@opendatasoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.client.model.explore_api;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets enum-format-datasets-v2.1
 */
@JsonAdapter(EnumFormatDatasetsV21.Adapter.class)
public enum EnumFormatDatasetsV21 {
  
  JSON("json"),
  
  GEOJSON("geojson"),
  
  SHP("shp"),
  
  CSV("csv"),
  
  XLSX("xlsx"),
  
  KML("kml"),
  
  JSONL("jsonl"),
  
  JSONLD("jsonld"),
  
  RDFXML("rdfxml"),
  
  TURTLE("turtle"),
  
  N3("n3");

  private String value;

  EnumFormatDatasetsV21(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static EnumFormatDatasetsV21 fromValue(String value) {
    for (EnumFormatDatasetsV21 b : EnumFormatDatasetsV21.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<EnumFormatDatasetsV21> {
    @Override
    public void write(final JsonWriter jsonWriter, final EnumFormatDatasetsV21 enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public EnumFormatDatasetsV21 read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return EnumFormatDatasetsV21.fromValue(value);
    }
  }
}

