/*
 * explore-api
 * The Opendatasoft Explore API v2 is organized around REST. It provides access to all the data available through the platform in a coherent, hierarchical way.  - Only the HTTP `GET` method is supported. - All API endpoints return JSON. - Endpoints are organized in a hierarchical way describing the relative relationship between objects. - All responses contain a list of links allowing easy and relevant navigation through the API endpoints. - All endpoints use the [Opendatasoft Query Language (ODSQL)](https://help.opendatasoft.com/apis/ods-explore-v2/#section/Opendatasoft-Query-Language-(ODSQL)). This means that, most of the time, parameters work the same way for all endpoints. - While the `records` endpoint is subject to a [limited number of returned records](https://help.opendatasoft.com/apis/ods-explore-v2/#tag/Dataset/operation/getRecords), the `exports` endpoint has no limitations.
 *
 * The version of the OpenAPI document: v2.1
 * Contact: support@opendatasoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.client.api.explore_api;

import org.wso2.client.api.ApiException;
import org.wso2.client.model.explore_api.DatasetV21;
import org.wso2.client.model.explore_api.EnumFormatDatasetsV21;
import org.wso2.client.model.explore_api.InlineResponse200;
import org.wso2.client.model.explore_api.InlineResponse2001;
import org.wso2.client.model.explore_api.InlineResponse400;
import org.wso2.client.model.explore_api.InlineResponse429;
import org.wso2.client.model.explore_api.ResultsDatasetV21;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CatalogApi
 */
@Ignore
public class CatalogApiTest {

    private final CatalogApi api = new CatalogApi();

    
    /**
     * Export a catalog in CSV
     *
     * Export a catalog in CSV (Comma Separated Values). Specific parameters are described here
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportCatalogCSVTest() throws ApiException {
        String delimiter = null;
        String listSeparator = null;
        Boolean quoteAll = null;
        Boolean withBom = null;
                api.exportCatalogCSV(delimiter, listSeparator, quoteAll, withBom);
        // TODO: test validations
    }
    
    /**
     * Export a catalog in RDF/XML (DCAT)
     *
     * Export a catalog in RDF/XML described with DCAT (Data Catalog Vocabulary). Specific parameters are described here
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportCatalogDCATTest() throws ApiException {
        String dcatApFormat = null;
        EnumFormatDatasetsV21 includeExports = null;
                api.exportCatalogDCAT(dcatApFormat, includeExports);
        // TODO: test validations
    }
    
    /**
     * Export a catalog
     *
     * Export a catalog in the desired format.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportDatasetsTest() throws ApiException {
        String format = null;
        String select = null;
        String where = null;
        String orderBy = null;
        String groupBy = null;
        Integer limit = null;
        Integer offset = null;
        String refine = null;
        String exclude = null;
        String lang = null;
        String timezone = null;
                api.exportDatasets(format, select, where, orderBy, groupBy, limit, offset, refine, exclude, lang, timezone);
        // TODO: test validations
    }
    
    /**
     * Show dataset information
     *
     * Returns a list of available endpoints for the specified dataset, with metadata and endpoints.  The response includes the following links: * the attachments endpoint * the files endpoint * the records endpoint * the catalog endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDatasetTest() throws ApiException {
        String datasetId = null;
        String select = null;
        String lang = null;
        String timezone = null;
        Boolean includeLinks = null;
        Boolean includeAppMetas = null;
                DatasetV21 response = api.getDataset(datasetId, select, lang, timezone, includeLinks, includeAppMetas);
        // TODO: test validations
    }
    
    /**
     * Query catalog datasets
     *
     * Retrieve available datasets.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDatasetsTest() throws ApiException {
        String select = null;
        String where = null;
        String orderBy = null;
        Integer limit = null;
        Integer offset = null;
        String refine = null;
        String exclude = null;
        String lang = null;
        String timezone = null;
        String groupBy = null;
        Boolean includeLinks = null;
        Boolean includeAppMetas = null;
                ResultsDatasetV21 response = api.getDatasets(select, where, orderBy, limit, offset, refine, exclude, lang, timezone, groupBy, includeLinks, includeAppMetas);
        // TODO: test validations
    }
    
    /**
     * List facet values
     *
     * Enumerate facet values for datasets and returns a list of values for each facet. Can be used to implement guided navigation in large result sets.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDatasetsFacetsTest() throws ApiException {
        String facet = null;
        String refine = null;
        String exclude = null;
        String where = null;
        String timezone = null;
                InlineResponse2001 response = api.getDatasetsFacets(facet, refine, exclude, where, timezone);
        // TODO: test validations
    }
    
    /**
     * List export formats
     *
     * List available export formats
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExportFormatsTest() throws ApiException {
                InlineResponse200 response = api.listExportFormats();
        // TODO: test validations
    }
    
}
